<?xml version="1.0"?>
<!--
	Auteur: Fabrice Coutant
	Date:   26-08-2006
	
	Pour utiliser ce XBL.
	
	DÃ©clarez dans votre css la classe suivante:
	
	.clock
	{
		-moz-binding: url('clock.xml#clock');
	}
	
	Puis dans votre page:
	
	<clock class="clock" />
	
	Pour personnaliser votre pendule vous pouvez jouer avec les attributs suivants:
	
	framecolor=   "black" 
	topbgcolor=   "#ffc000" 
	bottombgcolor="#ffff00"
	hourcolor=    "#1a0c80"
	minutecolor=  "#1a0c80"
	secondcolor=  "#ffac66"
	datecolor=    "#bbb"
	size=         "140"

-->
<bindings 
xmlns=      "http://www.mozilla.org/xbl"
xmlns:xbl=  "http://www.mozilla.org/xbl" 
xmlns:html= "http://www.w3.org/1999/xhtml"
xmlns:svg=  "http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink">
	<binding 
	id="clock">
		<content>
			<svg:svg
			anonid=     "conteneur"
			width=      "140"
			height=     "140"
			xbl:inherits="width=size,height=size"
			viewBox=    "0 0 150 150">
				<svg:defs>
					<svg:linearGradient 
					id="background" 
					x1="0" 
					y1="0" 
					x2="0" 
					y2="1">
						<svg:stop
						stop-color=  "#ffc000"
						xbl:inherits="stop-color=topbgcolor"
						stop-opacity="1"
						offset=      "0" />
						<svg:stop
						stop-color=  "#ffff00"
						xbl:inherits="stop-color=bottombgcolor"
						stop-opacity="1"
						offset=      "1" />
					</svg:linearGradient>
					<svg:linearGradient
					id="blanc"
					x1="0" 
					y1="0" 
					x2="0" 
					y2="1">
						<svg:stop
						stop-color=  "#ffffff"
						stop-opacity="1"
						offset=      "0" />
						<svg:stop
						stop-color=  "#ffffff"
						stop-opacity="0"
						offset=      "1" />
					</svg:linearGradient>
				</svg:defs>
				
				<!-- Le Fond -->
				<svg:circle 
				cx=          "70" 
				cy=          "70" 
				r=           "60" 
				stroke-width="5"
				stroke=      "#000"
				xbl:inherits="stroke=framecolor"
				fill=        "url(#background)"/>
				
				<!-- Le Cadran -->
				<svg:g 
				id="cadran">
					<svg:circle 
					id=          "15" 
					cx=          "70" 
					cy=          "20" 
					r=           "4" 
					stroke=      "#000"
					fill=        "#000"
					xbl:inherits="stroke=framecolor,fill=framecolor"/>
					<svg:circle 
					id=          "5" 
					cx=          "70" 
					cy=          "20" 
					r=           "2" 
					stroke=      "#000"
					fill=        "#000"
					xbl:inherits="stroke=framecolor,fill=framecolor"
					transform=   "rotate(30,70,70)"/>	
					<svg:use 
					xlink:href="#5" 
					transform= "rotate(30,70,70)"/>
				</svg:g>
				<svg:use 
				xlink:href="#cadran" 
				transform= "rotate(90,70,70)"/>
				<svg:use 
				xlink:href="#cadran" 
				transform= "rotate(180,70,70)"/>
				<svg:use 
				xlink:href="#cadran" 
				transform= "rotate(270,70,70)"/>
			
				<!-- Affichage de la Date -->
				<svg:text 
				anonid=      "date" 
				x=           "70" 
				y=           "100"
				font-size=   "8pt"
				text-anchor= "middle"
				fill=        "#bbb"
				xbl:inherits="fill=datecolor"> </svg:text>
				
				<!-- Les Aiguilles -->
				<svg:g 
				transform="translate(70,70) rotate(180)">
					<svg:g
					anonid="hourhand">
						<svg:line
						x1=          "0" 
						y1=          "0" 
						x2=          "0" 
						y2=          "30"
						stroke=      "#1a0c80"
						xbl:inherits="stroke=hourcolor"
						stroke-width="6px"/>
					</svg:g>
					<svg:g
					anonid="minutehand">
						<svg:line
						x1=          "0" 
						y1=          "0" 
						x2=          "0" 
						y2=          "40"
						stroke=      "#1a0c80"
						xbl:inherits="stroke=minutecolor"
						stroke-width="4px"/>
					</svg:g>
					<svg:g
					anonid="secondhand">
						<svg:line 
						x1=          "0" 
						y1=          "0" 
						x2=          "0" 
						y2=          "50"
						stroke=      "#ffac66"
						xbl:inherits="stroke=secondcolor"
						stroke-width="2px"/>
					</svg:g>
				</svg:g>
				<svg:circle 
				cx=          "70" 
				cy=          "70" 
				r=           "5"
				stroke=      "#000"
				fill=        "#000"
				xbl:inherits="stroke=framecolor,fill=framecolor"/>
				
				<!-- le verre -->
				<svg:ellipse 
				cx=          "70" 
				cy=          "45" 
				rx=          "43"
				ry=          "30"
				fill=        "url(#blanc)"/>
			</svg:svg>
		</content>
		<implementation>
			<constructor>
				<![CDATA[
					sec = null;
					min = null;
					heu = null;
					dat = null;
					
					try
					{
						sec = document.getAnonymousElementByAttribute(this,"anonid","secondhand");
						min = document.getAnonymousElementByAttribute(this,"anonid","minutehand");
						heu = document.getAnonymousElementByAttribute(this,"anonid","hourhand");
						dat = document.getAnonymousElementByAttribute(this,"anonid","date");
						setInterval(this.setTime, 1000);
					}
					catch(e)
					{
						log("Constructor: "+e);
					}
				]]>
			</constructor>
			<method
			name="setTime">
				<body>
					<![CDATA[
					try
					{
						this.Now     = new Date();
						
						// On set les aiguilles
						this.Seconds = this.Now.getSeconds();
						this.Minutes = this.Now.getMinutes() + this.Seconds / 60;
						this.Hours   = this.Now.getHours()   + this.Minutes / 60;
						
						sec.setAttribute('transform', 'rotate(' + (this.Seconds * 6)  + ')');
						min.setAttribute('transform', 'rotate(' + (this.Minutes * 6)  + ')');
						heu.setAttribute('transform', 'rotate(' + (this.Hours   * 30) + ')');
						
						// On set la date
						var strTime = null;
						var temp    = this.Now.getDate();
						strTime     ="";
						if(!(temp>9)) strTime="0";
						strTime += this.Now.getDate()+"/";
						
						temp = this.Now.getMonth()+1;
						if(!(temp>9)) strTime+="0";
						strTime += this.Now.getMonth()+1;
						strTime += "/"+this.Now.getFullYear().toString().substr(2,4);
						
						dat.firstChild.nodeValue = strTime;
					}
					catch(e)
					{
						log("Pendule : "+e);
					}
					]]>
				</body>
			</method>
			<method name="wheel">
				<parameter name="aEvent"/>
				<body>
					<![CDATA[
						conteneur = document.getAnonymousElementByAttribute(this,"anonid","conteneur");
						width = conteneur.getAttribute('width');
						height= conteneur.getAttribute('height');
						delta = aEvent.detail;
						if(delta == "3") 
						{
							width  = parseInt(width)+10;
							height = parseInt(height)+10;
						}
						else
						{
							width  = parseInt(width)-10;
							height = parseInt(height)-10;
						}
						conteneur.setAttribute("width",width);
						conteneur.setAttribute("height",height);
						]]>
				</body>
			</method>
		</implementation>
		<handlers>
			<handler event="DOMMouseScroll" action="return this.wheel(event);"/>
		</handlers>
	</binding>
</bindings>