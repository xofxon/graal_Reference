<?php
echo <<<END
<script type="application/x-javascript"><![CDATA[
var iday = -1;
var isModif = false;
var racine = 'http://localhost/';
var dsUrl=racine+'xul/create_rdf.php';
const c_script_encode_image='_graal_exe_encode_image.php?';
const c_script_rech_icones='_graal_fen_rech_icones_01.php?';
function apply(action,flag,value){
    if(!flag){ flag=false; }
    if(!value){ value=null; }
    fa_gid("content").contentWindow.document.execCommand(action, flag, value);
}							//Trouver de la doc sur ce execCommand, pour expliquer précisement
//http://msdn.microsoft.com/workshop/author/dhtml/reference/commandids.asp
//http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/execcommand.asp
//http://www.quirksmode.org/dom/execCommand.html
//http://www.mozilla.org/editor/midas-spec.html
function clear_edit(){
	fa_gid("titre").value = "";
	fa_gid("description").value = "";
	loadFile("art.php");
}
function createimage(){
    var path = prompt('Enter Image URL:', 'http://');
    if((path != null) && (path!="") && (path!="http://")) {
        apply("InsertImage",false,path);
    }
}
function createimage_background() {
  var vl_c_nomfic=fa03_sel_fichier("-1","");
  if (vl_c_nomfic=="") {return;}
  fa03_fichier_lit_et_envoie(c_script_encode_image,createimage_background_fin,vl_c_nomfic);
  
}
function createimage_background_fin(stream) {
  var vl_c_datas = stream;
	fa_gid("content").contentWindow.document.body.background=vl_c_datas;
}
function createimage_background_bis() {
  fa_ouvre(c_script_rech_icones+"vl_c_fonction_retour=pf_retour_fenetre_ficones_background",1000,1000);
}
function createimage_encode() {
  var vl_c_nomfic=fa03_sel_fichier("-1","");
  if (vl_c_nomfic=="") {return;}
  fa03_fichier_lit_et_envoie(c_script_encode_image,createimage_encode_fin,vl_c_nomfic);
  
}
function createimage_encode_fin(stream) {
  var vl_c_datas = stream;
//  alert(vl_c_datas)
  var e = fa_gid("content");
  var img=e.contentWindow.document.createElement("img");
  img.setAttribute("src", vl_c_datas);
  img.setAttribute("border","0");
  insertNodeAtSelection(e.contentWindow, img);
}

function createimage_encode_bis() {
  fa_ouvre(c_script_rech_icones+"vl_c_fonction_retour=pf_retour_fenetre_ficones",1000,1000);
}
function createlink(){
    var url = prompt("Saisissez une adresse :", "http://");
    if((url!=null) && (url!="") && (url!="http://")&& (url!="mailto:")){
        apply("CreateLink",false,url);
    }
}
function createtable(){
    var e = fa_gid("content");
    rows = 3;                                                          //paramètres du tableau par defaut
    cols = 3;
    table = e.contentWindow.document.createElement("table");
    table.setAttribute("border", "1");
    table.setAttribute("cellpadding", "2");
    table.setAttribute("cellspacing", "2");
    table.setAttribute("width", "100%");
    tbody = e.contentWindow.document.createElement("tbody");
    for(var i=0; i<rows; i++){
      tr=e.contentWindow.document.createElement("tr");
      for(var j=0; j<cols; j++){
        td=e.contentWindow.document.createElement("td");
        br=e.contentWindow.document.createElement("br");
        td.appendChild(br);
        tr.appendChild(td);
      }
      tbody.appendChild(tr);
    }
    table.appendChild(tbody);      
    insertNodeAtSelection(e.contentWindow, table);
}

function find(){
    todo();
}
function pf_imprime() {
  fa_gid("content").contentWindow.window.print();
}
function init(file){
    if(!file){ file="art.php"; }
    loadFile(file);
    
    //chargement du fichier rdf
    tree = fa_gid("tree");
    tree.setAttribute('datasources', dsUrl);
    //on fixe la source de donnée RDF
    
}

function insertNodeAtSelection_xof(win, insertNode){
    var sel = win.getSelection();
    var range = sel.getRangeAt(0);
    //sel.removeAllRanges();
    //range.deleteContents();
    var container = range.startContainer;
    var pos = range.startOffset;
    range=document.createRange();
    if(container.nodeType==3 && insertNode.nodeType==3){
      container.insertData(pos, insertNode.nodeValue);
      range.setEnd(container, pos+insertNode.length);
      range.setStart(container, pos+insertNode.length);
    }
    else{
      var afterNode;
      if(container.nodeType==3){
        var textNode = container;
        container = textNode.parentNode;
        var text = textNode.nodeValue;
        var textBefore = text.substr(0,pos);
        var textAfter = text.substr(pos);
        var beforeNode = document.createTextNode(textBefore);
        afterNode = document.createTextNode(textAfter);
        container.insertBefore(afterNode, textNode);
        container.insertBefore(insertNode, afterNode);
        container.insertBefore(beforeNode, insertNode);
        container.removeChild(textNode);
      }
      else{
        afterNode = container.childNodes[pos];
        container.insertBefore(insertNode, afterNode);
      }
      range.setEnd(afterNode, 0);
      range.setStart(afterNode, 0);
    }
    sel.addRange(range);
}


function insertNodeAtSelection(win, insertNode){
    var sel = win.getSelection();
    var range = sel.getRangeAt(0);
    sel.removeAllRanges();
    range.deleteContents();
    var container = range.startContainer;
    var pos = range.startOffset;
    range=document.createRange();
    if(container.nodeType==3 && insertNode.nodeType==3){
      container.insertData(pos, insertNode.nodeValue);
      range.setEnd(container, pos+insertNode.length);
      range.setStart(container, pos+insertNode.length);
    }
    else{
      var afterNode;
      if(container.nodeType==3){
        var textNode = container;
        container = textNode.parentNode;
        var text = textNode.nodeValue;
        var textBefore = text.substr(0,pos);
        var textAfter = text.substr(pos);
        var beforeNode = document.createTextNode(textBefore);
        afterNode = document.createTextNode(textAfter);
        container.insertBefore(afterNode, textNode);
        container.insertBefore(insertNode, afterNode);
        container.insertBefore(beforeNode, insertNode);
        container.removeChild(textNode);
      }
      else{
        afterNode = container.childNodes[pos];
        container.insertBefore(insertNode, afterNode);
      }
      range.setEnd(afterNode, 0);
      range.setStart(afterNode, 0);
    }
    sel.addRange(range);
}
function insertSymbol(vv_symbol)
{
  insertNodeAtSelection(fa_gid("content").contentWindow, document.createTextNode(vv_symbol.label));
  return;
  
  
    t = document.createTextNode(vv_symbol.label); 
  //p = fa_gid("content"); 
  //p.appendChild(t);
  var e = fa_gid("content");
  insertNodeAtSelection(e.contentWindow, t);
  return;  
    
    var afterNode;
    afterNode = document.createTextNode(vv_symbol);
    var e = fa_gid("content");
    //document.createTextNode(vv_symbol)
    insertNodeAtSelection(e.contentWindow, afterNode);
    return;
    var range;
    var e = fa_gid("content");
    var sel = e.contentWindow.getSelection();
    try {
      range = sel.getRangeAt(0);
  } catch(e) {
      range= document.createRange();
  }
    alert(vv_symbol.label);
    range.deleteContents();
    range.insertNode(sel,vv_symbol.label);
}


function loadFile(filename){
    if(filename){
        window.title = "Back-Office XUL: "+filename;
        var content = fa_gid("content");    		//On récupère la zone de saisie (Iframe) dans une variable
        content.setAttribute("src",filename);	//On fixe le nom du fichier comme source
        window.setTimeout("seteditmode('on')",2000); // Rend l'iframe editable
       // content.contentDocument.designMode="on";  
    }
}
function newFile(){
  fa_ouvre(window.location.href,0,0);
}
function openFile(){
	var vl_c_fichier=fa03_sel_fichier("*","*");
	if (!vl_c_fichier=="") {
		var output=fa03_fichier_lit(vl_c_fichier);
		var vl_c_debut="data:text/html;base64,";
  		fa_att_set("content","src",vl_c_debut+window.btoa(output));
	}
}
function recup_desc(){
	var arbre = fa_gid("tree");
	return (arbre.view.getCellText(arbre.currentIndex, arbre.columns['desc']));
}
function recup_id(){
	var arbre = fa_gid("tree");
	return (arbre.view.getCellText(arbre.currentIndex, arbre.columns['id']));
}
function recup_titre(){
	var arbre = fa_gid("tree");
	return (arbre.view.getCellText(arbre.currentIndex, arbre.columns['name']));
}
 function reloadTree()
  {
      tree.setAttribute('datasources', '');
      tree.setAttribute('datasources', dsUrl + "?z="+ Math.random()); 
      // random -> pour le forcer à recharger la source de donnée (bug dans ff apparement)
  }
function removelink(){
    apply("unlink");
}
function saveFile() {
	try {
		netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
	} catch (e) {
		alert("Permission to save file was denied.");
	}
	var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
  var nsIFilePicker = Components.interfaces.nsIFilePicker;
  var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
  fp.init(window, "Enregistrez un fichier HTML", nsIFilePicker.modeSave);
  fp.appendFilters(nsIFilePicker.filterHTML);
  var reponse = fp.show();
	if (reponse == nsIFilePicker.returnOK){
		//return fp.file.path;
	}
//
//  Il faut traiter le cas de non-sélection de fichier
//
	file.initWithPath( fp.file.path );
	if ( file.exists() == false ) {
		file.create( Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420 );
	}
	var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"]
		.createInstance( Components.interfaces.nsIFileOutputStream );
	/* Open flags 
	#define PR_RDONLY       0x01
	#define PR_WRONLY       0x02
	#define PR_RDWR         0x04
	#define PR_CREATE_FILE  0x08
	#define PR_APPEND      0x10
	#define PR_TRUNCATE     0x20
	#define PR_SYNC         0x40
	#define PR_EXCL         0x80
	*/
	/*
	** File modes ....
	**
	** CAVEAT: 'mode' is currently only applicable on UNIX platforms.
	** The 'mode' argument may be ignored by PR_Open on other platforms.
	**
	**   00400   Read by owner.
	**   00200   Write by owner.
	**   00100   Execute (search if a directory) by owner.
	**   00040   Read by group.
	**   00020   Write by group.
	**   00010   Execute by group.
	**   00004   Read by others.
	**   00002   Write by others
	**   00001   Execute by others.
	**
	*/
	outputStream.init( file, 0x04 | 0x08 | 0x20, 420, 0 );
	var content = fa_gid("content");
	//var texte = content.contentWindow.document.body.innerHTML;	//	Sans balise body
	var texte = content.contentWindow.document.documentElement.innerHTML;	//	Avec balise body
	var result = outputStream.write( texte, texte.length );
	outputStream.close();
}
function saveContent(stream){
    alert("Saved "+stream+" bytes");
}
function selectFile(){
//pour donner les privilège d'utilisation des composants XPCOM
netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

var nsIFilePicker = Components.interfaces.nsIFilePicker;
var fp = Components.classes["@mozilla.org/filepicker;1"]
      .createInstance(nsIFilePicker);
fp.init(window, "Sélectionner un fichier", nsIFilePicker.modeOpen);

var reponse = fp.show();
	if (reponse == nsIFilePicker.returnOK){
		alert('on peut maintenant ouvrir le fichier  '+ fp.file.path);
	}
}
function seteditmode(mode){
    fa_gid("content").contentDocument.designMode=mode;
}

function show_apercu(){
    //on change la source de donnée de l'iframe sur click de l'arbre
        var idart = recup_id();
        var frame_apercu = fa_gid("apercu");
        frame_apercu.setAttribute('src', racine+'xul/art_final.php?idart='+ idart );
}
function showContent(stream){
    fa_att_set("content","src","text/html,"+stream);
}
function supprimer(){

	if(fa_cui("tree")== -1)
		{
		alert('Il faut d\'abord sélectionner un article !');
		}
	else
		{
		if(confirm("Etes-vous sûr de vouloir supprimer l\'article ?"))
			{
			var idsample = recup_id();
			var s = fa_enc("idart")+"="+fa_enc(idsample);

			envoyer(s , racine+"xul/del_bdd.php", "Effacement"); 
			reloadTree();
			}
		}
	
}
function switchedit(){
    var deck = fa_gid("workarea");
    var index = deck.getAttribute("selectedIndex");
    if(index==1){
        viewhtml();
        deck.setAttribute("selectedIndex",0);
        fa_att_set("tb04","tooltiptext","Editer la source");
    }
    else{
        viewsource();
        deck.setAttribute("selectedIndex",1);
        fa_att_set("tb04","tooltiptext","Editer le document");
    }
}
function switch_onglet(bouton){
	if(bouton == "nouveau")
		{
		isModif = false;
		clear_edit();
		fa_gid("tbox").selectedIndex = 1;
		}
	if(bouton == "modifier")
		{
		if(fa_cui("tree")== -1)
			{
			alert('Il faut d\'abord sélectionner un article !');
			}
		else
			{
			isModif = true;
			fa_gid("titre").value = recup_titre();
			fa_gid("description").value = recup_desc();
			iday = recup_id();
			loadFile("art.php?idart="+iday);
			fa_gid("tbox").selectedIndex = 1;
			}
		}
	if(bouton == "valider")
		{
		fa_gid("titre").value = "";
		fa_gid("description").value = "";
		loadFile("art.php");
		fa_gid("tbox").selectedIndex = 0;
		}
}


function setforecolor(color){
    fa_gid("colorpicker1").hidePopup();
    apply("forecolor",false,color);
}
function setbackcolor(color){
    fa_gid("colorpicker2").hidePopup();
    apply("hilitecolor",false,color);
}

function setformat(selected){                         //?? euh a détailler
    if(selected){ selected="<"+selected+">"; }  //si l'attribut Selected = true
    apply("formatblock", false, selected);
    fa_gid("content").contentWindow.focus();  //redonne le focus a la selection
} 
function setfontname(selected){
    apply("fontname", false, selected);
    fa_gid("content").contentWindow.focus();
}
function setfontsize(selected){
    apply("fontsize", false, selected);
    //fa_gid(selectname).selectedIndex = 0;
    fa_gid("content").contentWindow.focus();
}
function todo(message){
    if(!message){ message="En développement ..."; }
    alert(message);
}


function viewhtml(){
	fa_gid("content").appendChild(document.createTextNode(fa_value_get("tb_source"))); 
}
function xxx_viewhtml(){
  //alert(fa_gid("content").contentWindow.document.contentType)
  //alert(fa_gid("content").contentWindow.document.characterSet)

  var vl_c_debut="data:"+fa_gid("content").contentWindow.document.contentType+";"+fa_gid("content").contentWindow.document.characterSet+";base64,";
  fa_att_set("content","src",vl_c_debut+window.btoa(fa_value_get("tb_source")));
}
function viewsource () {
  //fa_value_set("tb_source",fa_gid("content").contentWindow.document.documentElement.innerHTML);
  var machaine=fa_gid("content").contentWindow.document.documentElement.innerHTML;
  var tableau = machaine.split("\\n");
  machaine="";
  var count=tableau.length;
  if (count!=0) {
    for(i=0;i<count;i++) {
	    if (fa_se(tableau[i])!=""){
	    	machaine+=tableau[i]+"\\n";
		}
  	}
  	fa_value_set("tb_source",machaine);
  }
}
function zzz_viewhtml(){
    var content = fa_gid("content");
    var source  = fa_gid("source");
    var html = source.contentWindow.document.body.ownerDocument.createRange();
    html.selectNodeContents(source.contentWindow.document.body);
    content.contentWindow.document.body.innerHTML = html.toString();  //Contenu en HTML (traduit les balises)
    source.contentWindow.document.body.innerHTML = "";    //On efface la source (pour prendre en compte les prochaines modifs)
}
function zzz_viewsource(){
    var content = fa_gid("content");
    var source  = fa_gid("source");
    html = document.createTextNode(content.contentWindow.document.body.innerHTML); //On recupère le contenu edité
    content.contentWindow.document.body.innerHTML = "";  //Idem, on efface le contenu, pour prendre en compte modif du source
    html = content.contentWindow.document.importNode(html,false); //On recupère la valeur du contenu, sans prise en compte de l'HTML(sans les balises)
    source.contentWindow.document.body.appendChild(html);
    source.contentDocument.designMode="on";  // On autorise son edition
}
]]></script>
END;
?>

