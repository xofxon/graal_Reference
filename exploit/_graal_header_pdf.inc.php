<?php
require_once('tcpdf/config/lang/eng.php');
require_once('tcpdf/tcpdf.php');
class _graal_TCPDF extends TCPDF {


var $ProcessingTable=false;
var $aCols=array();
var $TableX;
var $HeaderColor;
var $RowColors;
var $ColorIndex;

//Cell with horizontal scaling if text is too wide
    function CellFit($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='',$scale=0,$force=1)
    {
        //Get string width
        $str_width=$this->GetStringWidth($txt);
        if ($str_width==0) {$str_width=1;}
        if ($str_width==0) {return;}
        //Calculate ratio to fit cell
        if($w==0)
            $w=$this->w-$this->rMargin-$this->x;
        $ratio=($w-$this->cMargin*2)/$str_width;

        $fit=($ratio < 1 || ($ratio > 1 && $force == 1));
        if ($fit)
        {
            switch ($scale)
            {

                //Character spacing
                case 0:
                    //Calculate character spacing in points
                    $char_space=($w-$this->cMargin*2-$str_width)/max($this->MBGetStringLength($txt)-1,1)*$this->k;
                    //Set character spacing
                    $this->_out(sprintf('BT %.2f Tc ET',$char_space));
                    break;

                //Horizontal scaling
                case 1:
                    //Calculate horizontal scaling
                    $horiz_scale=$ratio*100.0;
                    //Set horizontal scaling
                    $this->_out(sprintf('BT %.2f Tz ET',$horiz_scale));
                    break;

            }
            //Override user alignment (since text will fill up cell)
            $align='';
        }

        //Pass on to Cell method
        $this->Cell($w,$h,$txt,$border,$ln,$align,$fill,$link);

        //Reset character spacing/horizontal scaling
        if ($fit)
            $this->_out('BT '.($scale==0 ? '0 Tc' : '100 Tz').' ET');
    }

    //Cell with horizontal scaling only if necessary
    function CellFitScale($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='')
    {
        $this->CellFit($w,$h,$txt,$border,$ln,$align,$fill,$link,1,0);
    }

    //Cell with horizontal scaling always
    function CellFitScaleForce($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='')
    {
        $this->CellFit($w,$h,$txt,$border,$ln,$align,$fill,$link,1,1);
    }

    //Cell with character spacing only if necessary
    function CellFitSpace($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='')
    {
        $this->CellFit($w,$h,$txt,$border,$ln,$align,$fill,$link,0,0);
    }

    //Cell with character spacing always
    function CellFitSpaceForce($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='')
    {
        //Same as calling CellFit directly
        $this->CellFit($w,$h,$txt,$border,$ln,$align,$fill,$link,0,1);
    }

    //Patch to also work with CJK double-byte text
    function MBGetStringLength($s)
    {
        if($this->CurrentFont['type']=='Type0')
        {
            $len = 0;
            $nbbytes = strlen($s);
            for ($i = 0; $i < $nbbytes; $i++)
            {
                if (ord($s[$i])<128)
                    $len++;
                else
                {
                    $len++;
                    $i++;
                }
            }
            return $len;
        }
        else
            return strlen($s);
    }

function TableHeader()
{
    //$this->SetFont('Arial','B',12);
    $this->SetX($this->TableX);
    $fill=!empty($this->HeaderColor);
    if($fill)
        $this->SetFillColor($this->HeaderColor[0],$this->HeaderColor[1],$this->HeaderColor[2]);
    foreach($this->aCols as $col)
        $this->Cell($col['w'],6,$col['c'],1,0,'C',$fill);
    $this->Ln();
}

function Row($data)
{
    $this->SetX($this->TableX);
    $ci=$this->ColorIndex;
    $fill=!empty($this->RowColors[$ci]);
    if($fill)
        $this->SetFillColor($this->RowColors[$ci][0],$this->RowColors[$ci][1],$this->RowColors[$ci][2]);
    foreach($this->aCols as $col) {
        //$this->Cell($col['w'],5,$data[$col['f']],1,0,$col['a'],$fill);
        //  Remplacement de Cell par CellFitScale
        $this->CellFitScale($col['w'],5,$data[$col['f']],1,0,$col['a'],$fill);
    }
    $this->Ln();
    $this->ColorIndex=1-$ci;
}

function CalcWidths($width,$align)
{
    //Calcule les largeurs des colonnes
    $TableWidth=0;
    foreach($this->aCols as $i=>$col)
    {
        $w=$col['w'];
        if($w==-1)
            $w=$width/count($this->aCols);
        elseif(substr($w,-1)=='%')
            $w=$w/100*$width;
        $this->aCols[$i]['w']=$w;
        $TableWidth+=$w;
    }
    //Calcule l'abscisse du tableau
    if($align=='C')
        $this->TableX=max(($this->w-$TableWidth)/2,0);
    elseif($align=='R')
        $this->TableX=max($this->w-$this->rMargin-$TableWidth,0);
    else
        $this->TableX=$this->lMargin;
}

//function AddCol($field=-1,$width=-1,$caption='',$align='L') //  Ajout le 6/1/2007 d'un paramètre pour la totalisation
function AddCol($field=-1,$width=-1,$caption='',$align='L',$totalisation='N')
{
    //Ajoute une colonne au tableau
    if($field==-1)
        $field=count($this->aCols);
    $this->aCols[]=array('f'=>$field,'c'=>$caption,'w'=>$width,'a'=>$align,'t'=>$totalisation,'r'=>0);
}

function Table($query,$prop=array())
{
    //Exécute la requête
    $res=_graal_requete_bd($query) or die('Erreur: '.mysql_error()."<BR>Requête: $query");
    //Ajoute toutes les colonnes si aucune n'a été définie
    if(count($this->aCols)==0)
    {
        $nb=mysql_num_fields($res);
        for($i=0;$i<$nb;$i++)
            $this->AddCol();
    }
    //Détermine les noms des colonnes si non spécifiés
    foreach($this->aCols as $i=>$col)
    {
        if($col['c']=='')
        {
            if(is_string($col['f']))
                $this->aCols[$i]['c']=ucfirst($col['f']);
            else
                $this->aCols[$i]['c']=ucfirst(mysql_field_name($res,$col['f']));
        }
    }
    //Traite les propriétés
    if(!isset($prop['width']))
        $prop['width']=0;
    if($prop['width']==0)
        $prop['width']=$this->w-$this->lMargin-$this->rMargin;
    if(!isset($prop['align']))
        $prop['align']='C';
    if(!isset($prop['padding']))
        $prop['padding']=$this->cMargin;
    $cMargin=$this->cMargin;
    $this->cMargin=$prop['padding'];
    if(!isset($prop['HeaderColor']))
        $prop['HeaderColor']=array();
    $this->HeaderColor=$prop['HeaderColor'];
    if(!isset($prop['color1']))
        $prop['color1']=array();
    if(!isset($prop['color2']))
        $prop['color2']=array();
    $this->RowColors=array($prop['color1'],$prop['color2']);
    //Calcule les largeurs des colonnes
    $this->CalcWidths($prop['width'],$prop['align']);
    //Imprime l'en-tête
    $this->TableHeader();
    //Imprime les lignes
    //$this->SetFont('Arial','',11);
    $this->ColorIndex=0;
    $this->ProcessingTable=true;
    while($row=mysql_fetch_array($res))
        $this->Row($row);
    $this->ProcessingTable=false;
    $this->cMargin=$cMargin;
    $this->aCols=array();
    _graal_libere_requete_bd($res);
}


function _gf() {
  //  Grise le fond
  $this->SetFillColor(192,192,192);  //  gris
}
function _bf() {
  //  Blanchit le fond
  $this->SetFillColor(255,255,255);  //  Blanc
}

function WordWrap(&$text, $maxwidth)
{
    $text = trim($text);
    if ($text==='')
        return 0;
    $space = $this->GetStringWidth(' ');
    $lines = explode("\n", $text);
    $text = '';
    $count = 0;

    foreach ($lines as $line)
    {
        $words = preg_split('/ +/', $line);
        $width = 0;

        foreach ($words as $word)
        {
            $wordwidth = $this->GetStringWidth($word);
            if ($wordwidth > $maxwidth)
            {
                // Word is too long, we cut it
                for($i=0; $i<strlen($word); $i++)
                {
                    $wordwidth = $this->GetStringWidth(substr($word, $i, 1));
                    if($width + $wordwidth <= $maxwidth)
                    {
                        $width += $wordwidth;
                        $text .= substr($word, $i, 1);
                    }
                    else
                    {
                        $width = $wordwidth;
                        $text = rtrim($text)."\n".substr($word, $i, 1);
                        $count++;
                    }
                }
            }
            elseif($width + $wordwidth <= $maxwidth)
            {
                $width += $wordwidth + $space;
                $text .= $word.' ';
            }
            else
            {
                $width = $wordwidth + $space;
                $text = rtrim($text)."\n".$word.' ';
                $count++;
            }
        }
        $text = rtrim($text)."\n";
        $count++;
    }
    $text = rtrim($text);
    return $count;
}




function fact_dev( $libelle, $num )
{
    //$x1  = $this->w - 80;
    $x1  = $this->getPageWidth() - 80;
    $x2  = $x1 + 68;
    $y1  = 36;
    $y2  = $y1 + 2;
    $y3=6;
    $mid = ($x1 + $x2 ) / 2;
    
    $texte  = $libelle . " EN " . EURO . " N° : " . $num;    
    $szfont = 12;
    $loop   = 0;
    
    while ( $loop == 0 )
    {
       $this->SetFont( "FreeSerif", "B", $szfont );
       $sz = $this->GetStringWidth( $texte );
       if ( ($x1+$sz) > $x2 )
          $szfont --;
       else
          $loop ++;
    }

    $this->SetLineWidth(0.1);
    $this->SetFillColor(192);
    $this->RoundedRect($x1, $y1, ($x2 - $x1), $y3, 2.5, 'DF');
    //$this->SetXY( $x1+1, $y1+2);
    $this->SetXY( $x1+1, $y1);
    $this->Cell($x2-$x1 -1,5, $texte, 0, 0, "C" );
}
function _graal_pdf_cadre_00($contenu="Contenu",$x1=10,$y1=80,$lar=60,$hau=10,$coins="1111",$style="D" ){
	$x2  = $x1 + $lar;
	$y2  = $y1 + $hau;
  $mid = $y1 + (($y2-$y1) / 2);
	$this->RoundedRect($x1, $y1, ($x2 - $x1), ($y2-$y1), 2.5, $coins,$style);
	//$this->SetXY( $x1 + (($x2-$x1)/2) -5 , $y1+($hau/2)-3 );
	$chaine_00="x:".$this->GetX().", y:".$this->GetY();
  $this->SetXY( $x2 , $y1+($hau/2)-3 );
	$this->SetFont( "FreeSerif", "B", 14);
	//$this->Cell(10,4, $contenu, 0, 0, "C",'',1);
	$chaine="x:".$this->GetX().", y:".$this->GetY();
	$this->Cell(10,4, $chaine_00."-".$chaine, 0, 0, "C",'',1);
}

function _graal_pdf_cadre_01($contenu="Contenu",$legende="Légende",$x1=10,$y1=80,$lar=60,$hau=10,$coins="1111" ){
	$x2  = $x1 + $lar;
	$y2  = $y1 + $hau;
  $mid = $y1 + (($y2-$y1) / 2);
	$this->RoundedRect($x1, $y1, ($x2 - $x1), ($y2-$y1), 2.5, $coins,'D');
	$this->Line( $x1, $mid, $x2, $mid);
	$this->SetXY( $x1 + ($x2-$x1)/2 -5 , $y1+1 );
	$this->SetFont( "FreeSerif", "B", 14);
	$this->Cell(10,4, $legende, 0, 0, "C");
	$this->SetXY( $x1 + ($x2-$x1)/2 -5 , ($y1+($hau/2)) );
	$this->SetFont( "FreeSerif", "", 14);
	$this->Cell(10,5,$contenu, 0,0, "C");
}




}
require("_graal_fonctions_diverses.php");
require("_graal_fonctions_mysql.php");
?>
