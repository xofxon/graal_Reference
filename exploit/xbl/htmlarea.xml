<?xml version="1.0"?>
<bindings	xmlns="http://www.mozilla.org/xbl"
   				xmlns:html="http://www.w3.org/1999/xhtml"
   				xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   				xmlns:xbl="http://www.mozilla.org/xbl">
	<binding id="htmlarea">
		<content editmode="true">
			<html:iframe anonid="iframe" xbl:inherits="src" flex="1" onload="this.parentNode.editMode=this.parentNode.editMode;this.parentNode.init();"/>
		</content>
		<implementation>
			<constructor><![CDATA[if(!this.hasAttribute("src")) this.execCommand("new");]]></constructor>
			<field name="focusedBlock">null</field>
			<field name="focusedNode">null</field>
			<property name="editMode" onget="return this.getAttribute('editmode')=='true';" onset="this.setAttribute('editmode', val);this.document.designMode=(val)?'on':'off';"/>
			<property name="iframe" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'iframe');"/>
			<property name="document" onget="return this.iframe.contentDocument;"/>
			<property name="window" onget="return this.iframe.contentWindow;"/>
			<property name="innerHTML" onget="return '&lt;html&gt;'+this.document.firstChild.innerHTML+'&lt;/html&gt;'"/>
			<property name="textContent" onget="return this.document.body.textContent.replace(/\t/g, '');" onset="this.document.body.textContent=val;"/>
			<method name="init">
				<body><![CDATA[
					this.document.htmlarea=this;
					var styleSheet = this.createElement("link");
					styleSheet.setAttribute("rel", "stylesheet"); 
					styleSheet.setAttribute("type", "text/css"); 
					styleSheet.setAttribute("charset", "utf-8");
					styleSheet.setAttribute("href", "data:text/css;base64,QGNoYXJzZXQgInV0Zi04IjsNCmJvZHlbc2hvd2NyPSJ0cnVlIl0gaDE6YWZ0ZXIsIA0KYm9k eVtzaG93Y3I9InRydWUiXSBoMjphZnRlciwgDQpib2R5W3Nob3djcj0idHJ1ZSJdIGgzOmFm dGVyLCANCmJvZHlbc2hvd2NyPSJ0cnVlIl0gaDQ6YWZ0ZXIsIA0KYm9keVtzaG93Y3I9InRy dWUiXSBoNTphZnRlciwgDQpib2R5W3Nob3djcj0idHJ1ZSJdIGg2OmFmdGVyLA0KYm9keVtz aG93Y3I9InRydWUiXSBsaTphZnRlciwNCmJvZHlbc2hvd2NyPSJ0cnVlIl0gb3B0aW9uOmFm dGVyLA0KYm9keVtzaG93Y3I9InRydWUiXSBkaXY6YWZ0ZXIsDQpib2R5W3Nob3djcj0idHJ1 ZSJdIGRsOmFmdGVyLA0KYm9keVtzaG93Y3I9InRydWUiXSBtdWx0aWNvbDphZnRlciwNCmJv ZHlbc2hvd2NyPSJ0cnVlIl0gZGQ6YWZ0ZXIsDQpib2R5W3Nob3djcj0idHJ1ZSJdIGJsb2Nr cXVvdGU6YWZ0ZXIsDQpib2R5W3Nob3djcj0idHJ1ZSJdIG1hcDphZnRlciwNCmJvZHlbc2hv d2NyPSJ0cnVlIl0gZHQ6YWZ0ZXIsDQpib2R5W3Nob3djcj0idHJ1ZSJdIGZvcm06YWZ0ZXIs DQpib2R5W3Nob3djcj0idHJ1ZSJdIGFkZHJlc3M6YWZ0ZXIsDQpib2R5W3Nob3djcj0idHJ1 ZSJdIGNlbnRlcjphZnRlciwNCmJvZHlbc2hvd2NyPSJ0cnVlIl0gbGlzdGluZzphZnRlciwN CmJvZHlbc2hvd2NyPSJ0cnVlIl0geG1wOmFmdGVyLA0KYm9keVtzaG93Y3I9InRydWUiXSBw bGFpbnRleHQ6YWZ0ZXIsDQpib2R5W3Nob3djcj0idHJ1ZSJdIHVsOmFmdGVyLA0KYm9keVtz aG93Y3I9InRydWUiXSBtZW51OmFmdGVyLA0KYm9keVtzaG93Y3I9InRydWUiXSBkaXI6YWZ0 ZXIsDQpib2R5W3Nob3djcj0idHJ1ZSJdIG9sOmFmdGVyLA0KYm9keVtzaG93Y3I9InRydWUi XSBwOmFmdGVyIHsNCgljb250ZW50OiLCtiI7DQp9DQo="); 
//					styleSheet.setAttribute("href", "style.css"); 
					this.document.body.previousSibling.appendChild(styleSheet);
					
					// insere des P avec 'return' et des BR avec 'shift Return'
					this.document.execCommand("insertbronreturn", false, false);

					try {
//						this.document.execCommand("enableObjectResizing", false, false);
					} catch (e) {}
					 try {
						this.document.execCommand("enableInlineTableEditing", false, false);
					} catch (e) {}
					try {
						this.document.execCommand("styleWithCSS", false, true);
						this.document.execCommand("useCSS", false, true);  // stupid mozilla par. this means true
					} catch (e) {}
					try {
//						this.document.execCommand("useCSS", false, false);  // stupid mozilla par. this means true
					}
					catch (e) {}



					this.document.addEventListener("mouseup", function(event) {
						if(event.target.ownerDocument.htmlarea.editMode) {
							var evt = document.createEvent("Events");
							evt.initEvent("select", false, true);
							event.target.ownerDocument.htmlarea.dispatchEvent(evt);
						}
					}, false);
					this.document.addEventListener("keyup", function(event) {
						if(event.target.ownerDocument.htmlarea.editMode) {
							var evt = document.createEvent("Events");
							evt.initEvent("select", false, true);
							event.target.ownerDocument.htmlarea.dispatchEvent(evt);
						}
					}, false);

					// pour les racourci clavier
					this.document.addEventListener("keydown", function(event) {
						if(event.target.ownerDocument.htmlarea.editMode) {
							if(event.keyCode==116) { // F5
								event.stopPropagation();
								event.preventDefault();
								event.target.parentNode.location.reload(); 
							}
							if(event.keyCode==83) { // S
								event.stopPropagation();
								event.preventDefault();
							}
							if(event.target.ownerDocument.htmlarea.getAttribute("onkeypress")!="") eval(event.target.ownerDocument.htmlarea.getAttribute("onkeypress"));
						}
					}, false);

					// du texte à été modifié
					this.document.addEventListener("DOMCharacterDataModified", function(event) {
					}, false);
				]]></body>
			</method>
			<field name="ptVal">null</field>
			<method name="convertPixelToPt">
				<parameter name="pxVal"/>
				<body><![CDATA[
					if(this.ptVal==null) this.ptVal = parseFloat(this.window.getComputedStyle(this.document.body, null).getPropertyValue("font-size"))/12;
					pxVal = parseInt(pxVal);
					return Math.ceil(pxVal/this.ptVal)+"pt";
				]]></body>
			</method>
			<method name="convertPtToPixel">
				<parameter name="ptVal"/>
				<body><![CDATA[
					if(this.ptVal==null) this.ptVal = parseFloat(this.window.getComputedStyle(this.document.body, null).getPropertyValue("font-size"))/12;
					ptVal = parseInt(ptVal);
					return Math.floor(this.ptVal*ptVal)+"px";
				]]></body>
			</method>
			<method name="print">
				<body><![CDATA[
					this.window.print();
				]]></body>
			</method>
			<method name="getCommonAncestorBlock">
				<body><![CDATA[
					return this.getCommonAncestorElement(function(n) {return n.ownerDocument.htmlarea.getComputedStyle(n, "display")=="block"});
				]]></body>
			</method>
			<method name="getCommonAncestorElement">
				<parameter name="nodeNames"/>
				<body><![CDATA[
					var selection = this.getSelection();
					var block = null;
					if(selection.rangeCount==1) {
						var range = selection.getRangeAt(0);
						var common = range.commonAncestorContainer;
						if((range.startContainer.nodeType==Node.ELEMENT_NODE) &&
							(range.startContainer==range.endContainer) &&
						   ((range.startOffset==range.endOffset)||
						   	(range.startContainer.childNodes[range.startOffset]==range.endContainer.childNodes[range.endOffset-1]))
						   ) {
								common = range.startContainer.childNodes[range.startOffset];
						}
						this.focusedNode = common;
						try {
							if(common.nodeType==Node.TEXT_NODE) common = common.parentNode;
						} catch(e) {
							this.focusedNode = null;
							return block;
						}
						while(!block) {
							if((typeof nodeNames == "function") && nodeNames(common)) block = common;
							else if((typeof nodeNames == "object") && (nodeNames.indexOf(common.nodeName)!=-1)) block = common;
							else if(nodeNames == common.nodeName) block = common;
							else common = common.parentNode; 
						}
					}
					return block;
				]]></body>
			</method>
			<method name="getComputedStyle">
				<parameter name="node"/>
				<parameter name="cssprop"/>
				<body><![CDATA[
					if(cssprop!=null) return this.window.getComputedStyle(node, null).getPropertyValue(cssprop);
					else return this.window.getComputedStyle(node, null);
				]]></body>
			</method>
			<method name="createElement">
				<parameter name="nodename"/>
				<body><![CDATA[
					return this.document.createElement(nodename);
				]]></body>
			</method>
			<method name="createTextNode">
				<parameter name="txt"/>
				<body><![CDATA[
					return this.document.createTextNode(txt);
				]]></body>
			</method>
			<method name="insertNode">
				<parameter name="node"/>
				<body><![CDATA[
					var selection = this.window.getSelection();
					if(selection.rangeCount==1) {
						var range = selection.getRangeAt(0);
						range.deleteContents();
						range.insertNode(node);
						selection.selectAllChildren(node);
						range.collapse(true);
						this.window.focus();
					}
				]]></body>
			</method>
			<method name="execCommand">
				<parameter name="cmdName"/>
				<parameter name="value"/>
				<body><![CDATA[
					cmdName = cmdName.toLowerCase();
					if(cmdName=="new") {
						this.removeAttribute("src");
						this.setAttribute("src", "data:text/html;base64,PGh0bWw+PGhlYWQ+PHRpdGxlPm5ldyBkb2N1bWVudDwvdGl0bGU+PC9oZWFkPjxib2R5PjxwPiZuYnNwOzwvcD48L2JvZHk+PC9odG1sPg==");
					} else if(cmdName=="showcr") {
						this.document.body.setAttribute("showcr", !this.queryCommandValue("showcr")); 
					} else if(cmdName=="fontsize") {
						var fontsize = ["", "8pt", "10pt", "12pt", "14pt", "18pt", "24pt", "36pt"];
						this.document.execCommand(cmdName, null, fontsize.indexOf(value));
					} else this.document.execCommand(cmdName, null, value);
				]]></body>
			</method>
			<method name="queryCommandValue">
				<parameter name="cmdName"/>
				<body><![CDATA[
					cmdName = cmdName.toLowerCase();
					var value = "";
					try {
						if(this.document.queryCommandIndeterm(cmdName)) return "";
						value = this.document.queryCommandValue(cmdName);
						if(cmdName=="fontsize") {
							value = getPropertyValueOfSelection(this, "font-size");
							if(value!="") value = this.convertPixelToPt(value);
						} else {
							if(value=="") {
								if(cmdName=="bold") value = getPropertyValueOfSelection(this, "font-weight")=="bold";
								else if(cmdName=="fontname") value = getPropertyValueOfSelection(this, "font-family");						
								else if(cmdName=="italic") value = getPropertyValueOfSelection(this, "font-style")=="italic";						
								else if(cmdName=="underline") value = getPropertyValueOfSelection(this, "text-decoration").indexOf("underline")!=-1;						
								else if(cmdName=="strikethrough") value = getPropertyValueOfSelection(this, "text-decoration").indexOf("line-through")!=-1;						
								else if(cmdName=="superscript") value = false;						
								else if(cmdName=="subscript") value = false;
							}
						}
					} catch(e) { 
						if(cmdName=="showcr") value = this.document.body.getAttribute("showcr")=="true";
					}
					function getPropertyValueOfSelection(htmlarea, cssprop) {
						var selection = htmlarea.getSelection();
						var value = "";
						if(selection.rangeCount==1) {
							var range = selection.getRangeAt(0);
							var start = null, end = null, c = null, elt = null;
							if(range.startContainer!=range.endContainer) { // plus d'un noeud est selectionné
								// on verifie que ce n'est pas dut à la selection de noeud #text vide
								if( (range.startContainer.nodeType==Node.TEXT_NODE)&&(range.startContainer.length==0)&&
									(range.endContainer.nodeType==Node.TEXT_NODE)&&(range.endContainer.length==0)) {
									range.startContainer.removeChild(range.startContainer);
									range.endContainer.removeChild(range.endContainer);
								}
							 }
							var common = range.commonAncestorContainer;
							if(common.nodeType==Node.TEXT_NODE) value = htmlarea.window.getComputedStyle(common.parentNode, null).getPropertyValue(cssprop);
							else {
								var tw = htmlarea.document.createTreeWalker(common, NodeFilter.SHOW_TEXT, 
									function(n) {return (n.length)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP; }, true);
								var current = null;
								var inSelection = false;
								while((c = tw.nextNode())!=null) {
									if(selection.containsNode(c, false)) {
										current = htmlarea.window.getComputedStyle(c.parentNode, null).getPropertyValue(cssprop);
										if(!inSelection) {value = current; inSelection = true;}
										if(value!=current) {return "";}
									} else if(inSelection) return value;
								}
							}
						} 
						return value;
					}
					return value;
				]]></body>
			</method>
			<method name="queryCommandEnabled">
				<parameter name="cmdName"/>
				<body><![CDATA[
					return this.document.queryCommandEnabled(cmdName);
				]]></body>
			</method>
			<method name="queryCommandIndeterm">
				<parameter name="cmdName"/>
				<body><![CDATA[
					return this.document.queryCommandIndeterm(cmdName);
				]]></body>
			</method>
			<method name="queryCommandState">
				<parameter name="cmdName"/>
				<body><![CDATA[
					return this.document.queryCommandState(cmdName);
				]]></body>
			</method>
			<method name="getSelection">
				<body><![CDATA[
					return this.window.getSelection();
				]]></body>
			</method>
			<method name="focus">
				<body><![CDATA[
					this.window.focus();
				]]></body>
			</method>
			<method name="reload">
				<body><![CDATA[
					this.document.location.reload();
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="select"><![CDATA[
				if(this.editMode) {
					var currentNode = this.focusedNode;
					var currentBlock = this.getCommonAncestorBlock();
					var evt = null;
					if(currentBlock!=this.focusedBlock) {
						this.focusedBlock = currentBlock;
						evt = document.createEvent("Events");
						evt.initEvent("changeblock", false, true);
						this.dispatchEvent(evt);
					}
					if(currentNode!=this.focusedNode) {
						evt = document.createEvent("Events");
						evt.initEvent("changenode", false, true);
						this.dispatchEvent(evt);
					}
				}
			]]></handler>
			<handler event="changeblock"><![CDATA[
				if(this.getAttribute("onchangeblock")!="") eval(this.getAttribute("onchangeblock"));
			]]></handler>
			<handler event="changenode"><![CDATA[
				if(this.getAttribute("onchangenode")!="") eval(this.getAttribute("onchangenode"));
			]]></handler>
		</handlers>
	</binding>
</bindings>