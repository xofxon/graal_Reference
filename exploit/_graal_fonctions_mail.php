<?php
function fa_arrayFromEmailParts($parts,&$index){
  foreach ($parts as $part) {
    $tmp = explode(';',$part['Headers']['content-type:']);
    $type = strtolower($tmp[0]);  //  Ajouté le 25 février 2008 la conversion en minuscules suite à problème détecté par Nathalie Defait 
    $type_char = trim($tmp[1]);
    //  Dans le doute car parfois on a des chaines du type charset="iso-8859-1" Content-Transfer-Encoding: quoted -printable"
    //  on explode sur l'espace
    $raf_suite_charset=explode(' ',$type_char);
    $type_char=$raf_suite_charset[0];
    // outlook express (and maybe others?) puts "" around the charset like charset="utf-8", so remove if found
    $type_char=str_replace("'","",$type_char);
    $type_char=str_replace('"',"",$type_char);
    $content_id = $part['Headers']['content-id:'];
		$Content_Disposition=$part['Headers']['content-disposition:'];
    // multipart/alternative
    if (($type == 'multipart/alternative') or ($type=="multipart/related") or ($type=="multipart/report") or ($type=="multipart/mixed")){
      if (isset($ret)) {
        $ret = array_merge($ret,fa_arrayFromEmailParts($part['Parts'],$index));
      } else {
      $ret = fa_arrayFromEmailParts($part['Parts'],$index);
      }
    } else {
      //if (($type=="message/disposition-notification") or($type=="message/delivery-status") or ($type=="message/rfc822") or ($type=="text/rfc822-headers")) {
      if (($type=="message/disposition-notification") or($type=="message/delivery-status") or ($type=="text/rfc822-headers")) {
        // pour l'instant j'ignore car je considère que les informations sont déjà dans le body
        //  Accusé de réception
        //  Erreur de réception
        //  Retour du message original
        $ret[$index]['special'] = $type;
      } else {
      	$ret[$index]['Content-Disposition'] = $Content_Disposition;
        if ((($type == 'text/plain') OR ($type == 'text/html') OR ($type == 'text/css')) and ($part['FileName']==null)) {
          $ret[$index]['type'] = $type;
          $ret[$index]['char'] = trim($type_char);
          $ret[$index]['content'] = file_get_contents($part['BodyFile']);
        } else {
          $ret[$index]['type'] = $type;
          $ret[$index]['char'] = $type_char;
          $ret[$index]['file'] = $part['BodyFile'];
          $ret[$index]['taille'] = $part['BodyLength'];
          if ($ret[$index]['taille']!=0) {  //  On ne cherche à l'ouvrir que si il n'est pas vide 
            if (!file_get_contents($part['BodyFile'])) {
              //  C'est très bizarre, on ne peux pas ouvrir le fichier !!!! Vraisemblablement supprimé par antivirus !!!
              $ret[$index]['attention']="Très suspect";
            }
          }
          if (($content_id != null) and ($Content_Disposition==null)) {
            $content_id=substr($content_id,1);
            $content_id=substr($content_id,0,-1);
            $ret[$index]['coid']=  $content_id;
            $ret[$index]['inco']=  base64_encode(file_get_contents($part['BodyFile']));
          }
          $i=0;
          foreach($tmp as $data) {
            $i++;
						$data=mb_decode_mimeheader($data);//	le 14 avril 2009 il faut décoder avant sinon, s'il y a de l'encodage, on tronque une partie du nom à cause des "="
            $ret[$index]['data']=$data;
						if (strstr($data,'name')) {
              $t = explode("=",$data);
              $fileName = $t[1];
              // outlook (and maybe others?) puts "" around the name, so remove if found
              if(substr($fileName,0,1) == '"' AND substr($fileName,strlen($fileName)-1,1) == '"') {
                $fileName = substr($fileName,1,strlen($fileName)-2);
              }
              if ($fileName=="") {
                $fileName="????????????????????";
                $tp_fileName=explode("name=",$part['DecodedHeaders']["content-type:"][0][0]["Value"]);
                $fileName=$tp_fileName[1];
                if(substr($fileName,0,1) == '"' AND substr($fileName,strlen($fileName)-1,1) == '"') {
                 $fileName = substr($fileName,1,strlen($fileName)-2);
                }
                $ret[$index]['char']=$part['DecodedHeaders']["content-type:"][0][0]["Encoding"];
              };
              $ret[$index]['originalFileName'] = $fileName;
            } else {
              $tp_fileName=$part['FileName'];
              if ($tp_fileName!=null) {
                //$vl_encodage=mb_detect_encoding($part['FileName']);
                //$tp_fileName=iconv_mime_decode($part['FileName'],0,$vl_encodage);
                //$ret[$index]['originalFileName'] = $tp_fileName;
                $ret[$index]['originalFileName']=mb_decode_mimeheader($part['FileName']);
              } else {
                $ret[$index]['originalFileName'] = "graal_fichier_sans_nom.txt";
              }
            }
          }
        }
      }
      $index++;
    }
  }
  return($ret);
}
function fix_latin($instr){
  if(mb_check_encoding($instr,'UTF-8'))return $instr; // no need for the rest if it's all valid UTF-8 already
  global $nibble_good_chars,$byte_map;
  $outstr='';
  $char='';
  $rest='';
  while((strlen($instr))>0){
    if(1==preg_match($nibble_good_chars,$input,$match)){
      $char=$match[1];
      $rest=$match[2];
      $outstr.=$char;
    }elseif(1==preg_match('@^(.)(.*)$@s',$input,$match)){
      $char=$match[1];
      $rest=$match[2];
      $outstr.=$byte_map[$char];
    }
    $instr=$rest;
  }
  return $outstr;
}
function init_byte_map(){
  global $byte_map;
  for($x=128;$x<256;++$x){
    $byte_map[chr($x)]=utf8_encode(chr($x));
  }
  $cp1252_map=array(
    "\x80"=>"\xE2\x82\xAC",    // EURO SIGN
    "\x82" => "\xE2\x80\x9A",  // SINGLE LOW-9 QUOTATION MARK
    "\x83" => "\xC6\x92",      // LATIN SMALL LETTER F WITH HOOK
    "\x84" => "\xE2\x80\x9E",  // DOUBLE LOW-9 QUOTATION MARK
    "\x85" => "\xE2\x80\xA6",  // HORIZONTAL ELLIPSIS
    "\x86" => "\xE2\x80\xA0",  // DAGGER
    "\x87" => "\xE2\x80\xA1",  // DOUBLE DAGGER
    "\x88" => "\xCB\x86",      // MODIFIER LETTER CIRCUMFLEX ACCENT
    "\x89" => "\xE2\x80\xB0",  // PER MILLE SIGN
    "\x8A" => "\xC5\xA0",      // LATIN CAPITAL LETTER S WITH CARON
    "\x8B" => "\xE2\x80\xB9",  // SINGLE LEFT-POINTING ANGLE QUOTATION MARK
    "\x8C" => "\xC5\x92",      // LATIN CAPITAL LIGATURE OE
    "\x8E" => "\xC5\xBD",      // LATIN CAPITAL LETTER Z WITH CARON
    "\x91" => "\xE2\x80\x98",  // LEFT SINGLE QUOTATION MARK
    "\x92" => "\xE2\x80\x99",  // RIGHT SINGLE QUOTATION MARK
    "\x93" => "\xE2\x80\x9C",  // LEFT DOUBLE QUOTATION MARK
    "\x94" => "\xE2\x80\x9D",  // RIGHT DOUBLE QUOTATION MARK
    "\x95" => "\xE2\x80\xA2",  // BULLET
    "\x96" => "\xE2\x80\x93",  // EN DASH
    "\x97" => "\xE2\x80\x94",  // EM DASH
    "\x98" => "\xCB\x9C",      // SMALL TILDE
    "\x99" => "\xE2\x84\xA2",  // TRADE MARK SIGN
    "\x9A" => "\xC5\xA1",      // LATIN SMALL LETTER S WITH CARON
    "\x9B" => "\xE2\x80\xBA",  // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
    "\x9C" => "\xC5\x93",      // LATIN SMALL LIGATURE OE
    "\x9E" => "\xC5\xBE",      // LATIN SMALL LETTER Z WITH CARON
    "\x9F" => "\xC5\xB8"       // LATIN CAPITAL LETTER Y WITH DIAERESIS
  );
  foreach($cp1252_map as $k=>$v){
    $byte_map[$k]=$v;
  }
}

function fa_sujet_apres_ff6dot6($decoded){
//function fa_sujet($decoded){
	$byte_map=array();
	init_byte_map();
	$ascii_char='[\x00-\x7F]';
	$cont_byte='[\x80-\xBF]';
	$utf8_2='[\xC0-\xDF]'.$cont_byte;
	$utf8_3='[\xE0-\xEF]'.$cont_byte.'{2}';
	$utf8_4='[\xF0-\xF7]'.$cont_byte.'{3}';
	$utf8_5='[\xF8-\xFB]'.$cont_byte.'{4}';
	$nibble_good_chars = "@^($ascii_char+|$utf8_2|$utf8_3|$utf8_4|$utf8_5)(.*)$@s";
	//return fix_latin($decoded[0]["Headers"]["subject:"]);
	if(mb_check_encoding($decoded[0]["Headers"]["subject:"],'UTF-8'))return $decoded[0]["Headers"]["subject:"];
	return utf8_encode($decoded[0]["Headers"]["subject:"]);
}
//function fa_sujet_avant_ff6dot6($decoded){
function fa_sujet($decoded){
	$vl_encodage="";
  $vl_encodage=$decoded[0]["DecodedHeaders"]["subject:"][0][0]["Encoding"];
  if ($vl_encodage!="") {
  	if ($vl_encodage=="UTF-8") {
  		$vl_c_z02=$decoded[0]["Headers"]["subject:"];
  		$vl_c_z02=iconv($vl_encodage,"utf-8",$decoded[0]["DecodedHeaders"]["subject:"][0][0]["Value"]); //  C'est le moins pire des 2
  		//$vl_c_z02="01 $vl_encodage";
  		//return "3*".$vl_c_z02;
  	} else {
	    //  Attention bien conserver les 2 lignes suivantes !!
	    $vl_c_z02=iconv($vl_encodage,"utf-8",$decoded[0]["DecodedHeaders"]["subject:"][0][0]["Value"]); //  C'est le moins pire des 2
	    //$vl_c_z02=iconv_mime_decode($decoded[0]["DecodedHeaders"]["subject:"][0][0]["Value"],0,$vl_encodage); //  C'est le plus pire des 2
	    //$vl_c_z02="02 $vl_encodage";
  	}
  } else {
      $vl_encodage=mb_detect_encoding($decoded[0]["Headers"]["subject:"]);
      if ($vl_encodage=="UTF-8") {
  		$vl_c_z02=utf8_encode($decoded[0]["Headers"]["subject:"]);
  		//$vl_c_z02="03 $vl_encodage";
  		return $vl_c_z02;
  		} else {
      //$vl_c_z02=iconv_mime_decode($decoded[0]["Headers"]["subject:"],1,$vl_encodage);
      $vl_c_z02=mb_decode_mimeheader($decoded[0]["Headers"]["subject:"]);
      $vl_c_z02=utf8_encode($decoded[0]["Headers"]["subject:"]);
      //$vl_c_z02="04 $vl_encodage";
  		}
  }
  $vl_c_z02=str_replace("\r\n", "",$vl_c_z02);
  $vl_c_z02=str_replace("\t", "",$vl_c_z02);
  //$vl_c_z02=preg_replace("/\\x0|[\x01-\x1f]/U","",$vl_c_z02); //  Suppression des caractères non imprimables (http://www.phpinfo.net/page/archives/regex/)
  $vl_c_z02 = preg_replace("/\\x0|[\x01-\x1f]/U","",$vl_c_z02);
	return $vl_c_z02;
	
}
function fa_sujet_initiale($decoded){
	//function fa_sujet($decoded){
	$vl_encodage="";
  $vl_encodage=$decoded[0]["DecodedHeaders"]["subject:"][0][0]["Encoding"];
  if ($vl_encodage!="") {
    //  Attention bien conserver les 2 lignes suivantes !!
    $vl_c_z02=iconv($vl_encodage,"utf-8",$decoded[0]["DecodedHeaders"]["subject:"][0][0]["Value"]); //  C'est le moins pire des 2
    //$vl_c_z02=iconv_mime_decode($decoded[0]["DecodedHeaders"]["subject:"][0][0]["Value"],0,$vl_encodage); //  C'est le plus pire des 2
  } else {
      $vl_encodage=mb_detect_encoding($decoded[0]["Headers"]["subject:"]);
      $vl_c_z02=iconv_mime_decode($decoded[0]["Headers"]["subject:"],1,$vl_encodage);
      $vl_c_z02=mb_decode_mimeheader($decoded[0]["Headers"]["subject:"]);
  }
  $vl_c_z02=str_replace("\r\n", "",$vl_c_z02);
  $vl_c_z02=str_replace("\t", "",$vl_c_z02);
  //$vl_c_z02=preg_replace("/\\x0|[\x01-\x1f]/U","",$vl_c_z02); //  Suppression des caractères non imprimables (http://www.phpinfo.net/page/archives/regex/)
  $vl_c_z02 = preg_replace("/\\x0|[\x01-\x1f]/U","",$vl_c_z02);
	return $vl_c_z02;
}
function int2taille($i, $b=1024){
  $o=$i%1024;
  $k=(int)(($i/$b)%$b);
  $m=(int)(($i/$b/$b)%$b);
  $g=(int)(($i/$b/$b/$b));
  return (($g!=0)?($g.' Go '.$m.' Mo '.$k.' Ko '.$o.' o'):($m!=0)?($m.' Mo '.$k.' Ko '.$o.' o'):(($k!=0)?$k.' Ko '.$o.' o':$o.' o'));
}
function check_mail($email) {
  $retour=array();
  $retour[0]=false;$retour[1]=false;$retour[2]=false;$retour[3]=false;
  if( (preg_match('/(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)/', $email)) || (preg_match('/^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3}|[0-9]{1,3})(\]?)$/',$email)) ) {
    $retour[0]=true;
    $host = explode('@', $email);
    if(checkdnsrr($host[1].'.', 'MX') ) $retour[1]=true;
    //if(checkdnsrr($host[1].'.', 'A') ) $retour[2]=true;	//	pas utilisé, ralenti le traitement
    //if(checkdnsrr($host[1].'.', 'CNAME') ) $retour[3]=true; //pas utilisé, ralenti le traitement
  }
  return $retour;
}
function ff_verifie($email){
  //  Récupérée le 10 octobre 2007 sur http://atranchant.developpez.com/code/validation/
  // Auteur : bobocop (arobase) bobocop (point) cz
  // Traduction des commentaires par mathieu
  
  // Le code suivant est la version du 2 mai 2005 qui respecte les RFC 2822 et 1035
  // http://www.faqs.org/rfcs/rfc2822.html
  // http://www.faqs.org/rfcs/rfc1035.html
  $atom   = '[-a-z0-9!#$%&\'*+\\/=?^_`{|}~]';   // caractères autorisés avant l'arobase
  $domain = '([a-z0-9]([-a-z0-9]*[a-z0-9]+)?)'; // caractères autorisés après l'arobase (nom de domaine)
                                 
  $regex = '/^' . $atom . '+' .   // Une ou plusieurs fois les caractères autorisés avant l'arobase
  '(\.' . $atom . '+)*' .         // Suivis par zéro point ou plus
                                  // séparés par des caractères autorisés avant l'arobase
  '@' .                           // Suivis d'un arobase
  '(' . $domain . '{1,63}\.)+' .  // Suivis par 1 à 63 caractères autorisés pour le nom de domaine
                                  // séparés par des points
  $domain . '{2,63}$/i';          // Suivi de 2 à 63 caractères autorisés pour le nom de domaine
  
  // test de l'adresse e-mail
  if (preg_match($regex, $email)) {
    return true;
      
  } else {
    return false;
  }
}

function verif_email($email,$debug=false) {
/*
===============================================================================
==                                                                           ==
==                                                                           ==
==  Fonction permettant de verifier une adresse mail.                        ==
==  Cette fonction va verifier l'adresse mail fournie en argument            ==
==  de plusieurs manières. Premièrement a l'aide d'expressions régulière     ==
==  afin de vérifier la syntaxe de celle-ci.                                 ==
==  ensuite une verification mx afin de verifier le domaine                  ==
==  et puis une connection sur le serveur afin de valider l'user             ==
==                                                                           ==
==  function verif_email($email,$debug)                                      ==
==                                                                           ==
==  $email adresse à verifier.                                               ==
==  $debug information de deboguage.                                         ==
==                                                                           ==
==                                                                           ==
===============================================================================
*/

         global $HTTP_HOST;
         //$HTTP_HOST=$_SERVER["HTTP_HOST"];
         //$HTTP_HOST='xof';
         $HTTP_HOST="christophe-charron.org";
         $HTTP_HOST=$_SERVER["HTTP_HOST"];
         if ($debug) echo "host :  $HTTP_HOST<br>";
         $email_expediteur="webmestre@christophe-charron.org";
         $Return= array();
         $tableau_cibles=array();
         $recherche_faite=false;
         list ( $util, $domaine ) = split ("@",$email);
         	switch(strtolower($domaine)) {
         		case "free.fr":
         		case "aliceadsl.fr":
         		case "infonie.fr":
         		case "online.fr":
         			$Return[0]=3;
            		$Return[1]="Les adresses du domaine free.fr ne sont pas contrôlables.<br>Voir ici des explications : http://postmaster.free.fr/";
					return $Return;
					break;
         		case "aol.com":
         			$Return[0]=3;
            		$Return[1]="Les adresses du domaine aol.com ne sont pas controlables.<br>Voir ici des explications : http://eutoscos.web.aol.com/eu_tos_primary/ISO-8859-1/html/ISO-8859-1_578.dat";
					return $Return;
					break;
         	}
         /*
         maintenant on check l'existance du domaine.
         1) checkdnsrr <a href="http://www.manuelphp.com/php/function.checkdnsrr.php" target="_blank">http://www.manuelphp.com/php/function.checkdnsrr.php</a>
         */
         if ( checkdnsrr ( $domaine, "MX" ) )  {
          if($debug) {echo "Confirmation : MX record du  {$Domain} existe.<br>";}
          /*
           nous sauvons l'adress du mx record pour testerl'existence de serveur mail sur le domaine.
           1) getmxrr: <a href="http://www.manuelphp.com/php/function.getmxrr.php" target="_blank">http://www.manuelphp.com/php/function.getmxrr.php</a>
          */
          
          if ( getmxrr ($domaine, $mxHote)) {
            if($debug) {
              echo "Confirmation : MX record du  {$Domain} confirmée par MX LOOKUP.<br>";
              for ( $i = 0,$j = 1; $i < count ( $mxHote ); $i++,$j++ ) {
                echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result($j) - $mxHote[$i]<BR>";
              }
            }
              for ( $i = 0,$j = 1; $i < count ( $mxHote ); $i++,$j++ ) {
                $tableau_cibles[$i]=$mxHote[$i];
              }
          }
          /*
            la fonction getmxrr a stocké les information concernant les mx records dans le tableau $mxHote
            nous allons employé l'une de ces valeurs pour notre connection.
          */
          $nombre_mx=count ( $mxHote );  
        } else {
        // si il n'y a pas de  MX record simplement prendre le $domaine comme adresse pour la connection socket .
          $tableau_cibles[0]=$domaine;
          $nombre_mx=1;
          if ($debug) {echo "Confirmation : MX record du {$Domain} n'existe pas.<br>";}
        }
        /*
         nous sommes a la dernière étape a ce stade nous savons que l'adresse à une syntaxe valide et nous savons si le serveur mail
         est renseigné. nous allons donc ouvrir une session sur l'hote $mxHote et si nous obtenons une réponse valide allons checker
         l'utilisateur.
         1) fsockopen: <a href="http://www.manuelphp.com/php/function.fsockopen.php" target="_blank">http://www.manuelphp.com/php/function.fsockopen.php</a>
        */
        for ( $i = 0,$j = 1; $i < $nombre_mx; $i++,$j++ ) {
          $cible=$tableau_cibles[$i];
          $connection= @fsockopen ($cible,25,$errno, $errstr, 3);
          if ($connection) {
            if ($debug) echo "Connection réussie sur  {$cible} SMTP.<br>";
            /*
              la connection est réussie sur le serveur smtp.
              nous devons donc normalement recevoir une reponse contenant le code 220
              plus d'information sur le protocol smtp: <a href="http://www.commentcamarche.net/internet/smtp.php3" target="_blank">http://www.commentcamarche.net/internet/smtp.php3</a>
 
              1) fgets: <a href="http://www.manuelphp.com/php/function.fgets.php" target="_blank">http://www.manuelphp.com/php/function.fgets.php</a>
            */
            if ( ereg ( "^220", $Out = fgets ( $connection, 1024 ) ) ) {
              if ($debug) echo "Réponse : Connexion $Out<br>";
              // nous saluons le serveur smtp.
              fputs ( $connection, "HELO $HTTP_HOST\r\n" );
                  if ($debug) echo "en cours : HELO $HTTP_HOST<br>";
              $Out = fgets ( $connection, 1024 ); // reception reponse serveur.
                  if ($debug) echo "Réponse : HELO $Out<br>";
              // envoi de l'adresse de l'envoyeur au serveur.
              fputs ( $connection, "MAIL FROM: <{$email_expediteur}>\r\n" );
                  if ($debug) echo "en cours : MAIL FROM: &lt;{$email_expediteur}&gt;<br>";
              $From = fgets ( $connection, 1024 ); // reception reponse serveur.
                  if ($debug) echo "Réponse : MAIL FROM: &lt;{$From}&gt;<br>";
              // envoi de l'adresse cible.
              fputs ( $connection, "RCPT TO: <{$email}>\r\n" );
                  if ($debug) echo "en cours : RCPT TO: &lt;{$email}&gt;<br>";
              $To = fgets ( $connection, 1024 ); // reception reponse serveur.
                  if ($debug) echo "Réponse : RCPT TO: &lt;{$To}&gt;<br>";
              // cloture de la connection.
              fputs ( $connection, "QUIT\r\n");
                  if ($debug) echo "en cours : QUIT<br>";
              fclose($connection);
              // nous verifions les reponses du serveur a propos de la commande to et mail.
              // le serveur renvois le code  550 si elle n'existe pas
              // check du mailbox.
              //if ( !ereg ( "^250", $From ) || !ereg ( "^250", $To )) {
              if ( !ereg ( "^250", $To )) {
                  $Return[0]=false;
                  $Return[1]=trim($To);
                  //$Return[1]="AieAie";
                  if ($debug) echo trim($To)."<br>";
                  return $Return;
              } else {
                $Return[0]=true;
                $Return[1]="Cet email est valide";
                return $Return;
              }
            }
          } else {
            $Return[0]=false;
            $Return[1]="Connection impossible E-Mail server ({$cible}).";
            if ($debug) echo "Connection impossible E-Mail server ({$cible}).<br>";
            if ($debug) echo "$errstr ($errno)<br>";
          }
        }
        return $Return;
} 
?>
